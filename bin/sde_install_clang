#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2022 Michael D. Adams
# All rights reserved.
# 
# This file is part of the SDE software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

################################################################################

# References:
# http://llvm.org/releases/download.html
# http://llvm.org/docs/GettingStarted.html
# https://llvm.org/docs/GettingStarted.html#checkout
# http://llvm.org/docs/GettingStarted.html#compiling-the-llvm-suite-source-code
# https://github.com/llvm/llvm-project
# https://libcxx.llvm.org/BuildingLibcxx.html
# https://llvm.org/docs/CMake.html
# http://clang.llvm.org/get_started.html
# https://discourse.llvm.org/t/how-to-build-libc-libunwind-independent-of-libgcc-s-so-use-compiler-rt-builtins-atomics/63141

################################################################################
# Configuration
################################################################################

git_repo_url="https://github.com/llvm/llvm-project.git"
github_archive_base_url="https://github.com/llvm/llvm-project/releases/download"

example_main_method=git
example_main_version=llvmorg-19.1.6

example_lib_method=git
#example_lib_version=llvmorg-15.0.7
example_lib_version=llvmorg-19.1.6

example_dev_method=git
example_dev_version=9462ce885b2a067fdd20568ba9105489f3b34c53

################################################################################
# Functions
################################################################################

panic()
{
	echo "ERROR: $*"
	exit 1
}

# convert colon-separated list to array
list_to_array()
{
	if [ $# -ne 2 ]; then
		panic "list_to_array: invalid number of arguments"
	fi
	local _array_name="$1"
	local string="$2"
	IFS=': ' read -r -a "$_array_name" <<< "$string"
}

# print array as character-separated list
array_to_list()
{
	if [ $# -lt 1 ]; then
		panic "array_to_list: invalid number of arguments"
	fi
	local _array_name="$1"
	local delimiter
	if [ $# -ge 2 ]; then
		delimiter="$2"
	else
		delimiter=":"
	fi
	local IFS="$delimiter"
	eval 'echo "${'"$_array_name"'[*]}"'
}

# add single element to array
array_add()
{
	if [ $# -ne 2 ]; then
		panic "array_add: invalid number of arguments"
	fi
	local _array_name="$1"
	local value="$2"
	eval "$_array_name"'=("${'"$_array_name"'[@]}" '"$value"')'
}

# add single element to array without duplicates
array_add_unique()
{
	if [ $# -ne 2 ]; then
		panic "array_add: invalid number of arguments"
	fi
	local _array_name="$1"
	local value="$2"
	array_delete "$_array_name" "$value"
	array_add "$_array_name" "$value"
}

# add colon-separated list of values to array without duplicates
array_add_list_unique()
{
	if [ $# -ne 2 ]; then
		panic "array_add_list: invalid number of arguments"
	fi
	local _array_name="$1"
	local list="$2"
	list_to_array items "$list"
	local i
	for i in "${items[@]}"; do
		array_add_unique "$_array_name" "$i"
	done
}

# delete value from array
array_delete()
{
	if [ $# -ne 2 ]; then
		panic "array_delete: invalid number of arguments"
	fi
	local _array_name="$1"
	local value="$2"
	local in_array
	local out_array
	eval 'in_array=("${'"$_array_name"'[@]}")'
	local i
	for i in "${in_array[@]}"; do
		if [ "x$i" != "x$value" ]; then
			out_array+=("$i")
		fi
	done
	eval "$_array_name"'=('"${out_array[@]}"')'
}

# delete colon-separated list of values from array
array_delete_list()
{
	if [ $# -ne 2 ]; then
		panic "array_add_list: invalid number of arguments"
	fi
	local _array_name="$1"
	local list="$2"
	list_to_array items "$list"
	local i
	for i in "${items[@]}"; do
		array_delete "$_array_name" "$i"
	done
}

# for testing only
print_array()
{
	if [ $# -ne 1 ]; then
		panic "print_array: invalid number of arguments"
	fi
	local _array_name="$1"
	local i
	local dquote='"'
	eval local _array=('${'"$_array_name"'[@]}')
	echo "array: $_array_name has size ${#_array[@]}"
	for i in "${!_array[@]}"; do
	echo "[$i]=$dquote${_array[i]}$dquote"
	done
}

################################################################################
# Functions
################################################################################

version_to_version_id()
{
	local version="$1"
	local pattern='-rc[0-9]+'
	local version_id="$version"
	if [[ "$version" =~ $pattern ]]; then
		version_id="$(sed -e 's/-rc/rc/' <<< "$version")" || return 1
	fi
	echo "$version_id"
}

isabspath()
{
	case "$1" in
	/*)
		echo "1";;
	*)
		echo "0";;
	esac
}

disk_usage()
{
	local dir="$1"
	du -sk "$dir" | awk '{print $1;}' -
}

perform_cleanup()
{
	if [ -n "$tmp_dir" -a -d "$tmp_dir" ]; then
		rm -rf "$tmp_dir" || \
		  echo "warning: cannot remove temporary directory $tmp_dir"
	fi
}

usage()
{
	echo "BAD USAGE: $@"
	cat <<- EOF
	Usage:
	$0 [options] -v \$version -d \$install_dir

	Options
	=======

	--debug-level \$level
	    Set the debug level to \$level.
	--no-cleanup
	    Disable cleanup of the temporary directory.
	--strip
	    Strip executables.
	-d|--install-dir \$install_dir
	    Set the install directory to \$install_dir.
	--project \$project_spec
	    Add the projects specified by \$project_spec to the list of projects.
	    (The value \$project_spec is a colon-separated list.)
	--runtime \$runtime_spec
	    Add the runtimes specified by \$runtime_spec to the list of runtimes.
	    (The value \$runtime_spec is a colon-separated list.)
	--target \$target_spec
	    Add the targets specified by \$runtime_spec to the list of targets.
	    (The value \$target_spec is a colon-separated list.)
	--gcc-dir \$gcc_dir
	    Set the GCC directory to \$gcc_dir.
	--stop-early
	    Stop before building.
	--num-jobs \$num_jobs
	    Allow the use of \$num_jobs simultaneous jobs.
	--num-parallel-compile-jobs \$n
	    Allow the use of \$n simultaneous compile jobs.
	--num-parallel-link-jobs \$n
	    Allow the use of \$n simultaneous link jobs.
	--print-commit
	    Print the Git repository commit and exit.
	-v|--version \$version
	    Set the version to be installed to \$version.
	--enable-shared-libllvm
	    Make a shared monolithic LLVM library.
	--enable-link-shared-libllvm
	    Link applications with the shared monolithic LLVM library.
	--enable-test-suite
	    Install the test suite.
	--tmp-dir-templates \$template_path
	    Set the temporary directory template pathname \$template_path.
	--enable-static-libstdcxx
	    Use static libstdc++.
	--old-host-toolchain
	    Use the old host toolchain.

	Most boolean options have a "no" form.  For example:
	    -strip versus --no-strip and
        --cleanup versus --no-cleanup.

	Environment Variables
	=====================

	SDE_TMPDIR
	    Specifies the directory under which temporary files are placed
	    (e.g., when building software prior to installation).

	Examples
	========

	Perform simple install of version $example_clang_version:
	$0 --version $example_clang_version --install-dir /tmp/clang

	Perform an install from the main branch:
	SDE_TMPDIR=/var/tmp CC=gcc CXX=g++ $0 \\
	  --method git --version main \\
	  --default-projects-runtimes --install-dir /tmp/clang

	Perform a trunk install:
	commit=\$($0 --method git --version main --print-commit)
	SDE_TMPDIR=/var/tmp CC=gcc CXX=g++ $0 \\
	  --method git --version \$commit \\
	  --install-dir /tmp/clang-trunk-\$commit

	Print the latest commit on branch release/16.x:
	$0 --print-commit --method git --version release/16.x

	Perform a release-with-debug-information install with libc++,
	OpenMP, OpenCL (and RTTI and EH enabled) intended for using Clang as
	a library:
	SDE_TMPDIR=/var/tmp \\
	  $0 --method $example_lib_method --version $example_lib_version \\
	  --project "clang:clang-tools-extra" \\
	  --project "compiler-rt:lld:libclc:polly:openmp" \\
	  --runtime "libcxx:libcxxabi:libunwind" \\
	  --build-type RelWithDebInfo --build-docs --keep-source \\
	  --num-jobs 8 --num-parallel-compile-jobs 8 --num-parallel-link-jobs 1 \\
	  --enable-assertions --enable-rtti --enable-eh --no-default-pie \\
	  --enable-shared-libllvm --enable-link-shared-libllvm \\
	  --enable-link-shared-clangcpp \\
	  --no-enable-static-libstdcxx \\
	  --install-dir /tmp/clang-$example_lib_version-relwithdebinfo

	Perform a release-with-debug-info install intended for using Clang as
	a compiler:
	SDE_TMPDIR=/var/tmp \\
	  $0 --method $example_dev_method --version $example_dev_version \\
	  --default-projects-runtimes --default-targets \\
	  --build-type RelWithDebInfo \\
	  --num-jobs 8 --num-parallel-compile-jobs 8 --num-parallel-link-jobs 1 \\
	  --install-dir /tmp/clang-$example_dev_version

	Perform a release install intended for using Clang as a compiler
	(no static libstd++):
	SDE_TMPDIR=/var/tmp \\
	  $0 --method $example_main_method --version $example_main_version \\
	  --default-projects-runtimes --default-targets \\
	  --build-type Release \\
	  --num-jobs 8 --num-parallel-compile-jobs 8 --num-parallel-link-jobs 1 \\
	  --install-dir /tmp/clang-$example_main_version

	EOF
	exit 2
}

################################################################################
# Parse command line options.
################################################################################

cur_dir="$(pwd)" || panic "cannot get current directory"
# Ensure that cur_dir is an absolute path.
cur_dir="$(realpath "$cur_dir")" || panic "realpath failed"

# debuginfo-tests # Note: This causes configuration errors.

default_projects=(
	clang
	clang-tools-extra
	#cross-project-tests
	compiler-rt
	lld
	#lldb
	libclc
	polly
	# pstl
	openmp
	# flang mlir # NOTE: I think that flang requires mlir
	# test-suite
)
default_runtimes=(
	#libc
	libcxx
	libcxxabi
	libunwind
)
default_targets=(
	#X86
	#WebAssembly
)

cmake_generator="Unix Makefiles"
tmp_dir=
tmp_dir_template="${SDE_TMPDIR:-/tmp}/sde_install_clang-XXXXXXXX"
version=
install_dir=
gcc_dir=
use_old_host_toolchain=0
from_repo=0
stop_early=0
num_jobs=
num_compile_jobs=
num_link_jobs=
cleanup=1
print_commit=0
debug_level="${SDE_DEBUG_LEVEL:-0}"

projects=()
runtimes=()
targets=()

build_docs=
keep_source=0
cmake_build_type=Release
llvm_enable_rtti=
llvm_enable_eh=
llvm_enable_assertions=
libcxx_enable_abi_linker_script=
enable_shared_libllvm=1
llvm_link_llvm_dylib=0
clang_link_clang_dylib=0
use_static_libstdcxx=0
install_testsuite=0
install_stripped=0
default_pie=0
method=web

libcxx_enable_exceptions=
libcxx_enable_rtti=
libcxx_enable_abi_linker_script=
libcxx_enable_shared=
libcxx_enable_static=
libcxx_use_compiler_rt=
libcxx_cxx_abi=
libcxx_enable_static_abi_library=
libcxxabi_use_compiler_rt=
libcxxabi_enable_shared=
libcxxabi_enable_static=
libcxxabi_use_llvm_unwinder=
libcxxabi_enable_static_unwinder=
libunwind_use_compiler_rt=
libunwind_enable_shared=
libunwind_enable_static=

while [ $# -gt 0 ]; do
	option="$1"
	case "$option" in
	--verbose)
		shift 1
		verbose=$((verbose + 1))
		;;
	--debug-level)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		debug_level="$1"
		shift 1
		if [ "$debug_level" -ge 1 ]; then
			set -xv
		fi
		;;
	--cleanup)
		shift 1
		cleanup=1
		;;
	--no-cleanup|-C)
		shift 1
		cleanup=0
		;;
	--strip)
		shift 1
		install_stripped=1
		;;
	--no-strip)
		shift 1
		install_stripped=0
		;;
	--install-dir|-d)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		install_dir="$1"
		shift 1
		;;

	--cmake-c-compiler)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		cmake_c_compiler="$1"
		shift 1
		;;
	--no-cmake-c-compiler)
		shift 1
		cmake_c_compiler=
		;;
	--cmake-cxx-compiler)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		cmake_cxx_compiler="$1"
		shift 1
		;;
	--no-cmake-cxx-compiler)
		shift 1
		cmake_cxx_compiler=
		;;
	#--gcc-install-prefix)
	#	shift 1
	#	[ $# -gt 0 ] || usage "missing argument"
	#	gcc_install_prefix="$1"
	#	shift 1
	#	;;
	#--no-gcc-install-prefix)
	#	shift 1
	#	gcc_install_prefix=
	#	;;
	--gcc-dir|-g)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		gcc_dir="$1"
		cmake_c_compiler="$gcc_dir/bin/gcc"
		cmake_cxx_compiler="$gcc_dir/bin/g++"
		#gcc_install_prefix="$gcc_dir"
		shift 1
		;;
	--stop-early|-S)
		shift 1
		stop_early=1
		;;

	--num-jobs|-j)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		num_jobs="$1"
		shift 1
		;;
	--num-parallel-compile-jobs)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		num_compile_jobs="$1"
		shift 1
		;;
	--num-parallel-link-jobs)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		num_link_jobs="$1"
		shift 1
		;;

	--print-commit)
		shift 1
		print_commit=1
		;;
	--version|-v)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		version="$1"
		shift 1
		;;
	--enable-shared-libllvm|-Y)
		shift 1
		enable_shared_libllvm=1
		;;
	--no-enable-shared-libllvm)
		shift 1
		enable_shared_libllvm=0
		;;

	--enable-link-shared-libllvm)
		shift 1
		llvm_link_llvm_dylib=1
		;;
	--no-enable-link-shared-libllvm)
		shift 1
		llvm_link_llvm_dylib=0
		;;

	--enable-link-shared-clangcpp)
		shift 1
		clang_link_clang_dylib=1
		;;
	--no-enable-link-shared-clangcpp)
		shift 1
		clang_link_clang_dylib=0
		;;

	--build-docs)
		shift 1
		build_docs=1
		;;
	--no-build-docs)
		shift 1
		build_docs=0
		;;

	--enable-test-suite|-t)
		shift 1
		install_testsuite=1
		;;
	--no-enable-test-suite)
		shift 1
		install_testsuite=0
		;;
	--tmp-dir-template|-T)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		tmp_dir_template="$1"
		shift 1
		;;
	--enable-static-libstdcxx)
		shift 1
		use_static_libstdcxx=1
		;;
	--no-enable-static-libstdcxx)
		shift 1
		use_static_libstdcxx=0
		;;
	--old-host-toolchain)
		shift 1
		use_old_host_toolchain=1
		;;
	--no-old-host-toolchain)
		shift 1
		use_old_host_toolchain=0
		;;
	--cmake-generator)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		cmake_generator="$1"
		shift 1
		;;
	--ninja)
		shift 1
		cmake_generator="Ninja"
		;;

	--libcxx-enable-abi-linker-script)
		shift 1
		libcxx_enable_abi_linker_script=1
		;;
	--no-libcxx-enable-abi-linker-script)
		shift 1
		libcxx_enable_abi_linker_script=0
		;;

	--enable-assertions)
		shift 1
		llvm_enable_assertions=1
		;;
	--no-enable-assertions)
		shift 1
		llvm_enable_assertions=0
		;;

	--enable-rtti)
		shift 1
		llvm_enable_rtti=1
		;;
	--no-enable-rtti)
		shift 1
		llvm_enable_rtti=0
		;;

	--enable-eh)
		shift 1
		llvm_enable_eh=1
		;;
	--no-enable-eh)
		shift 1
		llvm_enable_eh=0
		;;

	--keep-source)
		shift 1
		keep_source=1
		;;
	--no-keep-source)
		shift 1
		keep_source=0
		;;

	--build-type)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		cmake_build_type="$1"
		shift 1
		;;

	--default-projects-runtimes)
		shift 1
		projects=("${default_projects[@]}")
		runtimes=("${default_runtimes[@]}")
		;;
	--clear-projects-runtimes)
		shift 1
		projects=()
		runtimes=()
		;;
	--default-projects)
		shift 1
		projects=("${default_projects[@]}")
		;;
	--clear-projects)
		shift 1
		projects=()
		;;
	--default-runtimes)
		shift 1
		runtimes=("${default_runtimes[@]}")
		;;
	--clear-runtimes)
		shift 1
		runtimes=()
		;;
	--default-targets)
		shift 1
		targets=("${default_targets[@]}")
		;;
	--clear-targets)
		shift 1
		targets=()
		;;
	--project)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		array_add_list_unique projects "$1"
		shift 1
		;;
	--no-project)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		array_delete_list projects "$1"
		shift 1
		;;
	--runtime)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		array_add_list_unique runtimes "$1"
		shift 1
		;;
	--no-runtime)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		array_delete_list runtimes "$1"
		shift 1
		;;
	--target)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		array_add_list_unique targets "$1"
		shift 1
		;;
	--no-target)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		array_delete_list targets "$1"
		shift 1
		;;

	--default-pie)
		shift 1
		default_pie=1
		;;
	--no-default-pie)
		shift 1
		default_pie=0
		;;

	--method)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		method="$1"
		shift 1
		;;

	--special)
		shift 1
		##########
		libcxx_enable_exceptions=1
		libcxx_enable_rtti=1
		###libcxx_enable_abi_linker_script=
		#libcxx_enable_shared=0
		#libcxx_enable_static=1
		#libcxx_use_compiler_rt=1
		#libcxx_cxx_abi=libcxxabi
		#libcxx_enable_static_abi_library=1
		#libcxxabi_use_compiler_rt=1
		#libcxxabi_enable_shared=0
		#libcxxabi_enable_static=1
		#libcxxabi_use_llvm_unwinder=1
		#libcxxabi_enable_static_unwinder=1
		#libunwind_use_compiler_rt=1
		#libunwind_enable_shared=0
		#libunwind_enable_static=1
		##########
		array_delete_list projects compiler-rt
		array_add_list_unique runtimes compiler-rt
		#array_delete_list projects libunwind
		#array_delete_list runtimes libunwind
		array_delete_list projects libc
		array_delete_list runtimes libc
		;;

	--*|-*)
		usage "invalid option $option"
		;;
	*)
		break
		;;
	esac
done
shift $((OPTIND - 1))

if [ "$debug_level" -ge 10 ]; then
	set -xv
fi

case "$method" in
git)
	from_repo=1;;
*)
	from_repo=0;;
esac

if [ "$print_commit" -ne 0 ]; then
	if [ "$from_repo" -eq 0 ]; then
		usage "cannot print Git commit for non-Git method"
	fi
	if [ -z "$version" ]; then
		usage "no version specified"
	fi
	commit="$(git ls-remote "$git_repo_url" "$version" | \
	  awk -v x='refs/heads/'"$version" '{if ($2 == x) {print $1;}}')" || \
	  panic "git rev-parse failed"
	echo "$commit" || panic "echo failed"
	exit 0
fi

if [ -z "$install_dir" ]; then
	usage "no installation directory specified"
fi
if [ -z "$version" ]; then
	usage "no version specified"
fi

if [ -n "$num_compile_jobs" -o -n "$num_link_jobs" ]; then
	if [ -z "$num_jobs" ]; then
		usage "number of link jobs not specified"
	fi
fi

cat <<- EOF
CMake generator: $cmake_generator
Temporary directory template: $tmp_dir_template
Install directory: $install_dir
GCC directory: $gcc_dir
Method: $method
Version: $version
Use old host toolchain: $use_old_host_toolchain
Stop early: $stop_early
Number of jobs: $num_jobs
Number of compile jobs: $num_compile_jobs
Number of link jobs: $num_link_jobs
Cleanup: $cleanup
Debug level: $debug_level
Keep source: $keep_source
CMake build typle: $cmake_build_type
Enable RTTI: $llvm_enable_rtti
Enable EH: $llvm_enable_eh
Enable assertions: $llvm_enable_assertions
Enable ABI linker script: $libcxx_enable_abi_linker_script
Enable shared (monolithic) LLVM library: $enable_shared_libllvm
Enable linking against shared LLVM library: $llvm_link_llvm_dylib
Enable linking against shared clang-cpp library: $clang_link_clang_dylib
Enable static libstdc++: $use_static_libstdcxx
Enable test suite: $install_testsuite
Strip: $install_stripped
Default PIE: $default_pie
Projects: $(array_to_list projects)
Runtimes: $(array_to_list runtimes)
Targets: $(array_to_list targets)
EOF

# For testing.
#exit 0

abs_install_dir="$install_dir"
result="$(isabspath "$abs_install_dir")" || panic "absolute path test failed"
if [ "$result" -eq 0 ]; then
	abs_install_dir="$cur_dir/$abs_install_dir"
fi

################################################################################
# Perform some setup.
################################################################################

start_time="$(date +%Y-%m-%d@%H:%M:%S)" || panic "cannot get time"

# Set the user file-creation mask to allow read and execute permissions
# for the group and others.
# This will help to increase the likelihood that the installed software
# will be accessible by all users.
umask 022

tmp_dir="$(mktemp -d "$tmp_dir_template")" || \
  panic "cannot create temporary directory"
if [ "$cleanup" -ne 0 ]; then
	trap perform_cleanup EXIT
fi

mangled_version="$(echo "$version" | tr '/' '-')" || panic
top_dir="$tmp_dir/llvm-clang-$mangled_version"
archive_dir="$top_dir/archives"
build_dir="$top_dir/build"

if [ "$keep_source" -ne 0 ]; then
	source_dir="$install_dir/.sde/src"
	git_dir="$install_dir/.sde/git"
else
	source_dir="$top_dir/src"
	git_dir="$top_dir/git"
fi

version_id="$(version_to_version_id "$version")" || panic

github_archive_url="$github_archive_base_url/llvmorg-$version/llvm-project-$version_id.src.tar.xz"

archive_filename="$(basename "$github_archive_url")" || panic
archive_file="$archive_dir/$archive_filename"

################################################################################
# Select the projects to build and install.
################################################################################

#if [ -n "$projects_spec" ]; then
#	projects_spec="$default_projects_spec"
#fi
#if [ -n "$runtimes_spec" ]; then
#	runtimes_spec="$default_runtimes_spec"
#fi
#if [ -n "$targets_spec" ]; then
#	targets_spec="$default_targets_spec"
#fi

################################################################################
# Start.
################################################################################

cat <<- EOF
============================================================
Starting installation process for Clang.

install directory: $abs_install_dir
temporary directory: $tmp_dir
version: $version
projects: $projects_string
============================================================
EOF

if [ 1 -ne 0 ]; then
	cat <<- EOF
	top_dir $top_dir
	source_dir $source_dir
	git_dir $git_dir
	build_dir $build_dir
	install_dir $install_dir
	abs_install_dir $abs_install_dir
	archive_dir $archive_dir
	archive_file $archive_file
	version_id $version_id
	github_archive_url $github_archive_url
	EOF
fi

#exit 0

for dir in "$top_dir" "$archive_dir" "$source_dir" "$build_dir" "$git_dir"; do
	if [ ! -d "$dir" ]; then
		mkdir -p "$dir" || panic "cannot make directory $dir"
	fi
done

################################################################################
# Download the software.
################################################################################

cat <<- EOF
============================================================
Downloading software
============================================================
EOF

download_start_time="$(date +%Y-%m-%d@%H:%M:%S)" || panic "cannot get time"
echo "time: $download_start_time"

if [ "$from_repo" -ne 0 ]; then

	echo "Downloading from repository with URL $git_repo_url"

	echo "CLONING REPOSITORY"
	git clone --progress "$git_repo_url" "$git_dir" || \
	  panic "cannot clone repository"
	(cd "$git_dir" && git checkout "$version") || \
	  panic "cannot checkout"
	commit="$(cd "$git_dir" && git rev-parse HEAD)" || \
	  panic "cannot get commit"
	echo "Checked out commit: $commit" || panic "echo failed"

	echo "RUNNING GIT LOG"
	(cd "$git_dir" && git --no-pager log -1) || panic "git log failed"

	main_source_dir="$git_dir/llvm"

else

	main_source_dir="$source_dir/llvm"

	wget -O "$archive_file" "$github_archive_url" || panic

	tar -x -J --strip-components 1 -f "$archive_file" -C "$source_dir" || \
	  panic

fi

################################################################################
# Configure the software.
################################################################################

if [ "$stop_early" -ne 0 ]; then
	cleanup=0
	exit 0
fi

cat <<- EOF
============================================================
Configuring software
============================================================
EOF

configure_start_time="$(date +%Y-%m-%d@%H:%M:%S)" || panic "cannot get time"
echo "time: $configure_start_time"

configure_options=()

configure_options+=(-G "$cmake_generator")
configure_options+=(-DCMAKE_INSTALL_PREFIX="$abs_install_dir")
configure_options+=(-DCMAKE_BUILD_TYPE="$cmake_build_type")
configure_options+=(-DCMAKE_VERBOSE_MAKEFILE=true)

# Note: Never enable BUILD_SHARED_LIBS for distributions of LLVM/Clang.
configure_options+=(-DBUILD_SHARED_LIBS=0)

if [ "${#projects[@]}" -ne 0 ]; then
	projects_spec="$(array_to_list projects ";")"
	configure_options+=("-DLLVM_ENABLE_PROJECTS=$projects_spec")
fi
if [ "${#runtimes[@]}" -ne 0 ]; then
	runtimes_spec="$(array_to_list runtimes ";")"
	configure_options+=("-DLLVM_ENABLE_RUNTIMES=$runtimes_spec")
fi
if [ "${#targets[@]}" -ne 0 ]; then
	targets_spec="$(array_to_list targets ";")"
	configure_options+=("-DLLVM_TARGETS_TO_BUILD=$targets_spec")
fi

if [ -n "$build_docs" ]; then
	configure_options+=("-DLLVM_BUILD_DOCS=$build_docs")
	configure_options+=("-DLLVM_INCLUDE_DOCS=$build_docs")
	configure_options+=("-DLLVM_ENABLE_DOXYGEN=$build_docs")
fi

if [ -n "$num_compile_jobs" ]; then
	configure_options+=("-DLLVM_PARALLEL_COMPILE_JOBS=$num_compile_jobs")
fi
if [ -n "$num_link_jobs" ]; then
	configure_options+=("-DLLVM_PARALLEL_LINK_JOBS=$num_link_jobs")
fi

if [ -n "$llvm_enable_assertions" ]; then
	configure_options+=(-DLLVM_ENABLE_ASSERTIONS="$llvm_enable_assertions")
fi
if [ -n "$llvm_enable_rtti" ]; then
	configure_options+=(-DLLVM_ENABLE_RTTI="$llvm_enable_rtti")
fi
if [ -n "$llvm_enable_eh" ]; then
	configure_options+=(-DLLVM_ENABLE_EH="$llvm_enable_eh")
fi

if [ "$use_static_libstdcxx" -ne 0 ]; then
    configure_options+=(-DCMAKE_EXE_LINKER_FLAGS="-static-libstdc++")
fi

if [ "$use_old_host_toolchain" -ne 0 ]; then
	# newly added
	configure_options+=(-DLLVM_FORCE_USE_OLD_TOOLCHAIN=1)
	# old
	configure_options+=(-DLLVM_FORCE_USE_OLD_HOST_TOOLCHAIN=1)
fi

if [ -n "$libcxx_enable_exceptions" ]; then
	configure_options+=(-DLIBCXX_ENABLE_EXCEPTIONS="$libcxx_enable_exceptions")
fi
if [ -n "$libcxx_enable_rtti" ]; then
	configure_options+=(-DLIBCXX_ENABLE_RTTI="$libcxx_enable_rtti")
fi
if [ -n "$libcxx_enable_abi_linker_script" ]; then
	configure_options+=(
	  -DLIBCXX_ENABLE_ABI_LINKER_SCRIPT="$libcxx_enable_abi_linker_script")
fi
if [ -n "$libcxx_enable_shared" ]; then
	configure_options+=(-DLIBCXX_ENABLE_SHARED="$libcxx_enable_shared")
fi
if [ -n "$libcxx_enable_static" ]; then
	configure_options+=(-DLIBCXX_ENABLE_STATIC="$libcxx_enable_static")
fi
if [ -n "$libcxx_use_compiler_rt" ]; then
	configure_options+=(-DLIBCXX_USE_COMPILER_RT="$libcxx_use_compiler_rt")
fi
if [ -n "$libcxx_cxx_abi" ]; then
	configure_options+=(-DLIBCXX_CXX_ABI="$libcxx_cxx_abi")
fi
if [ -n "$libcxx_enable_static_abi_library" ]; then
	configure_options+=(
	  -DLIBCXX_ENABLE_STATIC_ABI_LIBRARY="$libcxx_enable_static_abi_library")
fi

if [ -n "$libcxxabi_use_compiler_rt" ]; then
	configure_options+=(
	  -DLIBCXXABI_USE_COMPILER_RT="$libcxxabi_use_compiler_rt")
fi
if [ -n "$libcxxabi_enable_shared" ]; then
	configure_options+=(
	  -DLIBCXXABI_ENABLE_SHARED="$libcxxabi_enable_shared")
fi
if [ -n "$libcxxabi_enable_static" ]; then
	configure_options+=(
	  -DLIBCXXABI_ENABLE_STATIC="$libcxxabi_enable_static")
fi
if [ -n "$libcxxabi_use_llvm_unwinder" ]; then
	configure_options+=(
	  -DLIBCXXABI_USE_LLVM_UNWINDER="$libcxxabi_use_llvm_unwinder")
fi
if [ -n "$libcxxabi_enable_static_unwinder" ]; then
	configure_options+=(
	  -DLIBCXXABI_ENABLE_STATIC_UNWINDER="$libcxxabi_enable_static_unwinder")
fi

if [ -n "$libunwind_use_compiler_rt" ]; then
	configure_options+=(
	  -DLIBUNWIND_USE_COMPILER_RT="$libunwind_use_compiler_rt")
fi
if [ -n "$libunwind_enable_shared" ]; then
	configure_options+=(
	  -DLIBUNWIND_ENABLE_SHARED="$libunwind_enable_shared")
fi
if [ -n "$libunwind_enable_static" ]; then
	configure_options+=(
	  -DLIBUNWIND_ENABLE_STATIC="$libunwind_enable_static")
fi

#	configure_options+=(-DLIBCXX_HAS_ATOMIC_LIB=0)
#	configure_options+=(-DLIBCXX_HAS_GCC_LIB=0)
#	configure_options+=(-DLIBCXX_HAS_GCC_S_LIB=0)
#	configure_options+=(-DCOMPILER_RT_HAS_GCC_S_LIB=0)

if [ -n "$cmake_c_compiler" ]; then
	configure_options+=(-DCMAKE_C_COMPILER="$cmake_c_compiler")
fi
if [ -n "$cmake_cxx_compiler" ]; then
	configure_options+=(-DCMAKE_CXX_COMPILER="$cmake_cxx_compiler")
fi
# Note: GCC_INSTALL_PREFIX has been deprecated.
#if [ -n "$gcc_install_prefix" ]; then
#	configure_options+=(-DGCC_INSTALL_PREFIX="$gcc_install_prefix")
#fi
#	configure_options+=(-DCMAKE_CXX_LINK_FLAGS="-L${gcc_dir}/lib64 -Wl,-rpath,${gcc_dir}/lib64")

# NOTE: Enabling LLVM_LINK_LLVM_DYLIB also enables LLVM_BUILD_LLVM_DYLIB.
if [ -n "$enable_shared_libllvm" -a -n "$llvm_link_llvm_dylib" ]; then
	if [ "$enable_shared_libllvm" -eq 0 -a \
	  "$llvm_link_llvm_dylib" -ne 0 ]; then
		usage "cannot choose to link with nonexistent LLVM shared library"
	fi
fi
if [ -n "$enable_shared_libllvm" ]; then
	configure_options+=(-DLLVM_BUILD_LLVM_DYLIB="$enable_shared_libllvm")
fi
if [ -n "$llvm_link_llvm_dylib" ]; then
	configure_options+=(-DLLVM_LINK_LLVM_DYLIB="$llvm_link_llvm_dylib")
fi
if [ -n "$clang_link_clang_dylib" ]; then
	configure_options+=(-DCLANG_LINK_CLANG_DYLIB="$clang_link_clang_dylib")
fi

if [ -n "$default_pie" ]; then
	if [ "$default_pie" -ne 0 ]; then
		configure_options+=(-DCLANG_DEFAULT_PIE_ON_LINUX=1)
	else
		configure_options+=(-DCLANG_DEFAULT_PIE_ON_LINUX=0)
	fi
fi

####configure_options+=(-DLLVM_ENABLE_LIBCXX=0)
####configure_options+=(-DLLVM_STATIC_LINK_CXX_STDLIB=0)
####configure_options+=(-DLLVM_LOCAL_RPATH=1)
####configure_options+=(-DLLVM_BUILD_STATIC=1)

echo "RUNNING: cmake -H$main_source_dir -B$build_dir ${configure_options[*]}"
cmake -H"$main_source_dir" -B"$build_dir" "${configure_options[@]}" || \
  panic "cmake configure failed"

################################################################################
# Build the software.
################################################################################

cat <<- EOF
============================================================
Building software
============================================================
EOF

build_start_time="$(date +%Y-%m-%d@%H:%M:%S)" || panic "cannot get time"
echo "time: $build_start_time"

build_options=()
if [ -n "$num_jobs" ]; then
	build_options+=(-j $num_jobs)
fi

cmake --build "$build_dir" "${build_options[@]}" || \
  panic "build failed"

################################################################################
# Install the software.
################################################################################

cat <<- EOF
============================================================
Installing software
============================================================
EOF

install_start_time="$(date +%Y-%m-%d@%H:%M:%S)" || panic "cannot get time"
echo "time: $install_start_time"

if [ "$install_stripped" -ne 0 ]; then
	install_target="install/strip"
else
	install_target="install"
fi

cmake --build "$build_dir" --target "$install_target" || \
  panic "cmake install failed"

if [ "$from_repo" -ne 0 ]; then
	echo "$commit" > "$abs_install_dir/.version" || \
	  panic "cannot make version file"
fi

################################################################################
# Complete.
################################################################################

cat <<- EOF
============================================================
Done.
============================================================
EOF

end_time="$(date +%Y-%m-%d@%H:%M:%S)" || panic "cannot get time"
tmp_dir_space="$(disk_usage "$tmp_dir")" || tmp_dir_space="unknown"

echo "start time ............. $start_time"
echo "download start time .... $download_start_time"
echo "configure start time ... $configure_start_time"
echo "build start time ....... $build_start_time"
echo "install start time ..... $install_start_time"
echo "end time ............... $end_time"
echo
echo "temporary directory disk usage (1 KiB blocks) ... $tmp_dir_space"

exit 0
