#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2017, 2018 Michael D. Adams
# All rights reserved.
# 
# This file is part of the SDE software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

################################################################################
################################################################################

panic()
{
	echo "FATAL ERROR: $@" 1>&2
	exit 1
}

eecho()
{
	echo "$@" 1>&2
}

function join_by
{
	local IFS="$1"
	shift
	echo "$*"
}

preprocess_env_file()
{
	sed -e 's/#.*$//' -e '/^$/d'
}

# This function only looks in select directories for a compiler in order to
# avoid potentially finding ccache.
find_compiler()
{
	local dir
	local name="$1"
	local path=(/usr/local/bin /usr/local/sbin /usr/bin /usr/sbin /bin)
	for dir in "${path[@]}"; do
		local target="$dir/$name"
		if [ -x "$target" ]; then
			echo "$target"
			return 0
		fi
	done
	return 1
}

add_to_path()
{
	if [ $# -ne 3 ]; then
		return 1
	fi
	local path="$1"
	local prefix="$2"
	local suffix="$3"
	if [ -n "$prefix" ]; then
		if [ -n "$path" ]; then
			path="$prefix:$path"
		else
			path="$prefix"
		fi
	fi
	if [ -n "$suffix" ]; then
		if [ -n "$path" ]; then
			path="$path:$suffix"
		else
			path="$suffix"
		fi
	fi
	echo "$path"
}

################################################################################
################################################################################

bash_setup()
{
	echo 'export SDE_LEVEL="'$sde_level'";' || return 1

	echo 'export SDE_NAME='"$sde_name"';' || return 1
	echo 'export SDE_TOP_DIR='"$sde_top_dir"';' || return 1

	echo 'export SDE_PACKAGES='\"$(join_by : ${enabled_packages[@]})\"';' || \
	  return 1

#	local path=$(add_to_path \
#	  "$PATH" $(join_by : "${path_prefix[@]}") \
#	  $(join_by : "${path_suffix[@]}")) || \
#	  return 1
	if [ "$emit_path" -ne 0 ]; then
		local path=("${path_prefix[@]}" $PATH "${path_suffix[@]}")
		echo 'export PATH='\"$(join_by : ${path[@]})\"';' || \
		  return 1
		echo 'export SDE_OLD_PATH="'$old_path'";' || return 1
	fi
	echo 'export SDE_PATH_PREFIX='\"$(join_by : ${path_prefix[@]})\"';' || \
	  return 1
	echo 'export SDE_PATH_SUFFIX='\"$(join_by : ${path_suffix[@]})\"';' || \
	  return 1

	#echo 'export SDE_GCC_INC_PATH=;' || \
	#  return 1
	echo 'export SDE_GCC_INC_PATH='\"$(join_by : ${gcc_inc_path[@]})\"';' || \
	  return 1
	echo 'export SDE_GCC_C_INC_PATH='\"$(join_by : ${gcc_inc_path[@]})\"';' || \
	  return 1
	echo 'export SDE_GCC_CXX_INC_PATH='\"$(join_by : ${gcc_inc_path[@]})\"';' || \
	  return 1

	#echo 'export SDE_CLANG_INC_PATH=;' || \
	#  return 1
	echo 'export SDE_CLANG_INC_PATH='\"$(join_by : ${clang_inc_path[@]})\"';' || \
	  return 1
	echo 'export SDE_CLANG_C_INC_PATH='\"$(join_by : ${clang_inc_path[@]})\"';' || \
	  return 1
	echo 'export SDE_CLANG_CXX_INC_PATH='\"$(join_by : ${clang_inc_path[@]})\"';' || \
	  return 1

	echo 'export SDE_GCC_LIB_PATH='\"$(join_by : ${lib_path[@]})\"';' || \
	  return 1
	echo 'export SDE_CLANG_LIB_PATH='\"$(join_by : ${lib_path[@]})\"';' || \
	  return 1

	# GNU C++ compiler
	echo 'export SDE_GCC_CXX_PROGRAM='"$gcc_cxx_program"';' || \
	  return 1
	echo 'export SDE_GCC_CXX_TRANSFORM='\""$gcc_cxx_transform"\"';' || \
	  return 1
	#if [ ${gcc_cxx_transform:-0} -ne 0 ]; then
		echo 'export SDE_GCC_CXX_OPTIONS_PREFIX='\""${gcc_cxx_options_prefix[*]}"\"';' || \
		  return 1
		echo 'export SDE_GCC_CXX_OPTIONS_SUFFIX='\""${gcc_cxx_options_suffix[*]}"\"';' || \
		  return 1
	#fi

	# GNU C compiler
	echo 'export SDE_GCC_C_PROGRAM='"$gcc_c_program"';' || \
	  return 1
	echo 'export SDE_GCC_C_TRANSFORM='\""$gcc_c_transform"\"';' || \
	  return 1
	#if [ ${gcc_c_transform:-0} -ne 0 ]; then
		echo 'export SDE_GCC_C_OPTIONS_PREFIX='\""${gcc_c_options_prefix[*]}"\"';' || \
		  return 1
		echo 'export SDE_GCC_C_OPTIONS_SUFFIX='\""${gcc_c_options_suffix[*]}"\"';' || \
		  return 1
	#fi

	# GCC Go compiler
	echo 'export SDE_GCC_GCCGO_PROGRAM='"$gcc_gccgo_program"';' || \
	  return 1
	echo 'export SDE_GCC_GCCGO_TRANSFORM='\""$gcc_gccgo_transform"\"';' || \
	  return 1
	#if [ ${gcc_gccgo_transform:-0} -ne 0 ]; then
		echo 'export SDE_GCC_GCCGO_OPTIONS_PREFIX='\""${gcc_gccgo_options_prefix[*]}"\"';' || \
		  return 1
		echo 'export SDE_GCC_GCCGO_OPTIONS_SUFFIX='\""${gcc_gccgo_options_suffix[*]}"\"';' || \
		  return 1
	#fi

	# GCC Go program
	echo 'export SDE_GCC_GO_PROGRAM='"$gcc_go_program"';' || \
	  return 1
	echo 'export SDE_GCC_GO_TRANSFORM='\""$gcc_go_transform"\"';' || \
	  return 1
	#if [ ${gcc_go_transform:-0} -ne 0 ]; then
		echo 'export SDE_GCC_GO_OPTIONS_PREFIX='\""${gcc_go_options_prefix[*]}"\"';' || \
		  return 1
		echo 'export SDE_GCC_GO_OPTIONS_SUFFIX='\""${gcc_go_options_suffix[*]}"\"';' || \
		  return 1
	#fi

	# Clang C++ compiler
	echo 'export SDE_CLANG_CXX_PROGRAM='"$clang_cxx_program"';' || \
	  return 1
	echo 'export SDE_CLANG_CXX_TRANSFORM='\""$clang_cxx_transform"\"';' || \
	  return 1
	#if [ ${clang_cxx_transform:-0} -ne 0 ]; then
		echo 'export SDE_CLANG_CXX_OPTIONS_PREFIX='\""${clang_cxx_options_prefix[*]}"\"';' || \
		  return 1
		echo 'export SDE_CLANG_CXX_OPTIONS_SUFFIX='\""${clang_cxx_options_suffix[*]}"\"';' || \
		  return 1
	#fi

	# Clang C compiler
	echo 'export SDE_CLANG_C_PROGRAM='"$clang_c_program"';' || \
	  return 1
	echo 'export SDE_CLANG_C_TRANSFORM='\""$clang_c_transform"\"';' || \
	  return 1
	#if [ ${sde_clang_c_transform:-0} -ne 0 ]; then
		echo 'export SDE_CLANG_C_OPTIONS_PREFIX='\""${clang_c_options_prefix[*]}"\"';' || \
		  return 1
		echo 'export SDE_CLANG_C_OPTIONS_SUFFIX='\""${clang_c_options_suffix[*]}"\"';' || \
		  return 1
	#fi

	# CMake
	echo 'export SDE_CMAKE_PROGRAM='"$cmake_program"';' || \
	  return 1
	echo 'export SDE_CMAKE_TRANSFORM='"$cmake_transform"';' || \
	  return 1
	#if [ ${cmake_transform:-0} -ne 0 ]; then
#		#  return 1
#		local path=$(add_to_path \
#		  "$CMAKE_PREFIX_PATH" \
#		  $(join_by : "${cmake_path_prefix[@]}") \
#		  $(join_by : "${cmake_path_suffix[@]}")) || \
#		  return 1
#		echo 'export CMAKE_PREFIX_PATH='\"$path\"';' || \
#		  return 1
		echo 'export SDE_CMAKE_PATH_PREFIX='\"$(join_by : ${cmake_path_prefix[@]})\"';' || \
		  return 1
		echo 'export SDE_CMAKE_PATH_SUFFIX='\"$(join_by : ${cmake_path_suffix[@]})\"';' || \
		  return 1
	#fi

	# CXX and CC environment variables
	#echo 'export SDE_CXX='"$SDE_GCC_CXX_PROGRAM"';' || \
	#  return 1
	#echo 'export SDE_CC='"$SDE_GCC_CC_PROGRAM"';' || \
	#  return 1

	echo 'export SDE_GDB_PROGRAM='"$gdb_program"';' || \
	  return 1

	local path=$(add_to_path \
	  "$LD_LIBRARY_PATH" "$(join_by : "${ld_path_prefix[@]}")" \
	  "$(join_by : "${ld_path_suffix[@]}")") || \
	  return 1
	echo 'export LD_LIBRARY_PATH='\""$path"\"';' || \
	  return 1

	if [ -n "$boost_root" ]; then
		#echo 'export BOOST_ROOT='\""$boost_root"\"';' || \
		#  return 1
		echo 'export Boost_ROOT='\""$boost_root"\"';' || \
		  return 1
	fi

	emit_python_path=1
	if [ "$emit_python_path" -ne 0 ]; then
		pythonpath_prefix=("${python_lib_dirs[@]}")
		local pythonpath=("${pythonpath_prefix[@]}" "$PYTHONPATH" "${pythonpath_suffix[@]}")
		echo 'export PYTHONPATH='\"$(join_by : ${pythonpath[@]})\"';' || \
		  return 1
	fi
}

################################################################################
################################################################################

usage()
{
	echo "$@"
	cat <<- EOF
	usage: $0 [options]
	options:
	-n env
	    Set the environment to env.
	-s shell
	    Set the shell to shell.
	-v
	    Increase the verbosity level of output.
	-f
	    Allow use of command from within SDE environment.
	EOF
	exit 2
}

################################################################################
################################################################################

cmd_dir=$(dirname "$0") || panic "cannot get command directory"
top_dir="$cmd_dir/.."
default_env_file="$top_dir/etc/default_environment"
env_dir="$top_dir/etc/environments"

all_packages_name="__all__"

debug_level="${SDE_DEBUG_LEVEL:-0}"
verbose=0
shell=bash
name=
force=0
package_spec=

gcc_cxx_transform=0
gcc_c_transform=0
clang_cxx_transform=0
clang_c_transform=0
cmake_transform=0
adaptive=0
emit_path=0
boost_root=
force_trunk=0

while getopts vn:s:fap:ZD:z opt; do
	case "$opt" in
	D)
		debug_level="$OPTARG";;
	a)
		adaptive=1;;
	n)
		name="$OPTARG";;
	s)
		shell="$OPTARG";;
	f)
		force=1;;
	v)
		verbose=1;;
	p)
		package_spec="$OPTARG";;
	Z)
		emit_path=1;;
	z)
		force_trunk=1;;
	*)
		usage "invalid option $opt";;
	esac
done
shift $((OPTIND - 1))

if [ "$debug_level" -ge 10 ]; then
	set -xv
fi

if [ "$debug_level" -ge 1 ]; then
	eecho "name $name [${#name}]"
	eecho "package_spec $package_spec [${#package_spec}]"
	eecho "adaptive $adaptive"
	eecho "emit_path $emit_path"
fi

if [ $# -ne 0 ]; then
	usage "unexpected arguments $@"
fi

if [ "$name" = "$all_packages_name" ]; then
	name=
	adaptive=1
fi

if [ -z "$SDE_LEVEL" ]; then
	sde_level=0
	#old_path="$PATH"
else
	sde_level="$SDE_LEVEL"
	#old_path="$SDE_OLD_PATH"
fi
sde_level=$((sde_level + 1))

#if [ "$sde_level" -ge 2 ]; then
#	PATH="$old_path"
#fi

if [ -n "$SDE_NAME" -a "$force" -eq 0 ]; then
	panic "invoking from within SDE environment disallowed"
fi

if [ -z "$name" -a -z "$package_spec" -a "$adaptive" -eq 0 ]; then
	if [ ! -f "$default_env_file" ]; then
		panic "no default environment available"
	fi
	name=$(cat "$default_env_file") || panic
fi

case "$SHELL" in
*bash*)
	shell=bash;;
*tcsh*)
	shell=tcsh;;
esac

cmd_dir=$(dirname "$0") || panic "cannot get directory name"
abs_cmd_dir=$(readlink -f "$cmd_dir") || \
  panic "cannot get canonical directory name"

sde_top_dir="$abs_cmd_dir/.."
sde_top_dir=$(readlink -f "$sde_top_dir") || panic "readlink failed"

enabled_packages=()

packages_dir="$sde_top_dir/packages"

packages_valid=0

if [ "$packages_valid" -eq 0 -a "$adaptive" -ne 0 ]; then

	packages=()
	for path in "$packages_dir"/*; do
		package_name=$(basename "$path") || panic
		if [ -d "$path" ]; then
			if [[ "$package_name" =~ ^[^-]*$ ]]; then
				packages+=("$package_name")
			fi
		fi
	done

	packages_valid=1
	name="$all_packages_name"

fi

if [ "$packages_valid" -eq 0 -a -n "$name" ]; then
	packages=($(preprocess_env_file < "$env_dir/$name")) || panic
	packages_valid=1
fi

if [ "$packages_valid" -eq 0 -a -n "$package_spec" ]; then
		packages=($(echo "$package_spec" | tr ':' ' ')) || panic
		if [ -z "$name" ]; then
			name="explicit"
		fi
		packages_valid=1
fi

if [ "$force_trunk" -ne 0 ]; then
	gcc_package=gcc
	if [ -d "$packages_dir/gcc-trunk" ]; then
		gcc_package=gcc-trunk
	fi
	clang_package=clang
	if [ -d "$packages_dir/clang-trunk" ]; then
		clang_package=clang-trunk
	fi
	new_packages=()
	for package in "${packages[@]}"; do
		case "$package" in
		gcc)
			package="$gcc_package";;
		clang)
			package="$clang_package";;
		*)
		esac
		new_packages+=("$package")
	done
	packages=("${new_packages[@]}")
fi

if [ "$debug_level" -ge 1 ]; then
	eecho "packages:"
	for package in "${packages[@]}"; do
		eecho "    $package"
	done
fi

sde_name="$name"

################################################################################
################################################################################

cmake_package=
gcc_package=
clang_package=
gccgo_package=
gdb_package=
use_libcxx=0
has_normal_package=0

fmtlib_package=

path_prefix=()
path_suffix=()
inc_path=()
lib_path=()
cmake_path_prefix=()
cmake_path_suffix=()
ld_path_prefix=()
ld_path_suffix=()

gcc_inc_path=()
gcc_lib_path=()

clang_inc_path=()
clang_lib_path=()

gcc_gccgo_options_prefix=()
gcc_gccgo_options_suffix=()
gcc_go_options_prefix=()
gcc_go_options_suffix=()

# This directory must be first in the search path.
path_prefix+=("$sde_top_dir/bin")

for package in "${packages[@]}"; do

	if [ ! -d "$packages_dir/$package" ]; then
		if [ "$debug_level" -ge 1 -o "$verbose" -ge 1 ]; then
			eecho "warning: ignoring nonexistent package $package"
		fi
		continue
	fi

	enabled_packages+=("$package")

	case "$package" in
	gcc|gcc-*)
		gcc_package="$package";;
	clang|clang-*)
		clang_package="$package";;
	cmake|cmake-*)
		cmake_package="$package";;
	gdb|gdb-*)
		gdb_package="$package";;
	libcxx|libcxx-*)
		use_libcxx=1;;
	boost|boost-*)
		boost_root="$packages_dir/$package";;
	gccgo|gccgo-*)
		gccgo_package="$package";;
	fmtlib*)
		fmtlib_package="$package";;
	esac

	case "$package" in
	gcc|gcc-*|clang|clang-*|gccgo|gccgo-*)
		;;
	*)
		has_normal_package=1;;
	esac

	target="$packages_dir/$package/bin"
	if [ -d "$target" ]; then
		path_prefix+=("$target")
	fi

	case "$package" in
	gcc|gcc-*|clang|clang-*|gccgo|gccgo-*|gdb|gdb-*|sdebase|sdebase-*)
		;;
	*)
		target="$packages_dir/$package/include"
		if [ -d "$target" ]; then
			inc_path+=("$target")
		fi
		target="$packages_dir/$package/lib"
		if [ -d "$target" ]; then
			lib_path+=("$target")
		fi
		target="$packages_dir/$package/lib64"
		if [ -d "$target" ]; then
			lib_path+=("$target")
		fi
		target="$packages_dir/$package"
		if [ -d "$target/include" ]; then
			cmake_path_prefix+=("$target")
		fi
		;;
	esac

done

if [ "$debug_level" -ge 1 ]; then
	eecho "CMake package: $cmake_package"
	eecho "GCC package: $gcc_package"
	eecho "Clang package: $clang_package"
fi

if [ -n "$gcc_package" ]; then
	gcc_dir="$packages_dir/$gcc_package"
else
	# Note: This may not be correct.
	gcc_dir="/usr"
fi
if [ -n "$clang_package" ]; then
	clang_dir="$packages_dir/$clang_package"
else
	# Note: This may not be correct.
	clang_dir="/usr"
fi
if [ -n "$gccgo_package" ]; then
	gccgo_dir="$packages_dir/$gccgo_package"
else
	# Note: This may not be correct.
	gccgo_dir="/usr"
fi

if [ "$has_normal_package" -ne 0 ]; then
	cmake_transform=1
fi

clang_cxx_options_prefix+=(-Wno-unused-command-line-argument)
clang_c_options_prefix+=(-Wno-unused-command-line-argument)

if [ "$use_libcxx" -ne 0 ]; then
		clang_cxx_options_prefix+=(-stdlib=libc++)
		#clang_cxx_options_prefix+=(-isystem "$clang_dir"/include/c++/v1)
		clang_inc_path+=("$clang_dir"/include/c++/v1)
		#clang_cxx_options_suffix+=(-L"$gcc_dir"/lib64)
		ld_path_prefix+=("$gcc_dir"/lib64)
		clang_cxx_options_suffix+=(-Wl,-rpath,"$gcc_dir"/lib64)
		#clang_cxx_options_suffix+=(-L"$clang_dir"/lib)
		ld_path_prefix+=("$clang_dir"/lib)
		clang_cxx_options_suffix+=(-Wl,-rpath,"$clang_dir"/lib)
else
		clang_cxx_options_prefix+=(--gcc-toolchain="$gcc_dir")
		#clang_cxx_options_suffix+=(-L"$gcc_dir"/lib64)
		ld_path_prefix+=("$gcc_dir"/lib64)
		clang_cxx_options_suffix+=(-Wl,-rpath,"$gcc_dir"/lib64)
		#clang_cxx_options_suffix+=(-L"$clang_dir"/lib)
		ld_path_prefix+=("$clang_dir"/lib)
		clang_cxx_options_suffix+=(-Wl,-rpath,"$clang_dir"/lib)
fi

for dir in "${inc_path[@]}"; do

	#gcc_cxx_options_prefix+=(-isystem "$dir")
	#gcc_c_options_prefix+=(-isystem "$dir")
	gcc_inc_path+=("$dir")

	#clang_cxx_options_prefix+=(-isystem "$dir")
	#clang_c_options_prefix+=(-isystem "$dir")
	clang_inc_path+=("$dir")

done

python_lib_dirs=()

for dir in "${lib_path[@]}"; do

	#gcc_cxx_options_suffix+=(-L "$dir")
	#gcc_c_options_suffix+=(-L "$dir")
	gcc_lib_path+=("$dir")

	#clang_cxx_options_suffix+=(-L "$dir")
	#clang_c_options_suffix+=(-L "$dir")
	clang_lib_path+=("$dir")

	gcc_cxx_options_suffix+=(-Wl,-rpath,"$dir")
	gcc_c_options_suffix+=(-Wl,-rpath,"$dir")
	clang_cxx_options_suffix+=(-Wl,-rpath,"$dir")
	clang_c_options_suffix+=(-Wl,-rpath,"$dir")
	ld_path_prefix+=("$dir")

	for subdir in "$dir"/python*/site-packages; do
		if [ -d "$subdir" ]; then
			python_lib_dirs+=("$subdir")
		fi
	done

done

if [ -n "$gcc_package" ]; then
	gcc_cxx_program="$packages_dir/$gcc_package/bin/g++"
	gcc_c_program="$packages_dir/$gcc_package/bin/gcc"
	gcc_cxx_options_suffix+=(-Wl,-rpath,"$packages_dir/$gcc_package/lib64")
	gcc_c_options_suffix+=(-Wl,-rpath,"$packages_dir/$gcc_package/lib64")
	ld_path_prefix+=("$packages_dir/$gcc_package/lib")
	ld_path_prefix+=("$packages_dir/$gcc_package/lib64")
	gcc_c_transform=1
	gcc_cxx_transform=1
else
	gcc_cxx_program=$(find_compiler g++) || gcc_cxx_program=false
	gcc_c_program=$(find_compiler gcc) || gcc_c_program=false
fi
if [ -n "$clang_package" ]; then
	clang_cxx_program="$packages_dir/$clang_package/bin/clang++"
	clang_c_program="$packages_dir/$clang_package/bin/clang"
	clang_cxx_options_suffix+=(-Wl,-rpath,"$packages_dir/$clang_package/lib64")
	clang_c_options_suffix+=(-Wl,-rpath,"$packages_dir/$clang_package/lib64")
	ld_path_prefix+=("$packages_dir/$clang_package/lib")
	ld_path_prefix+=("$packages_dir/$clang_package/lib64")
	clang_cxx_transform=1
	clang_c_transform=1
else
	clang_cxx_program=$(find_compiler clang++) || clang_cxx_program=false
	clang_c_program=$(find_compiler clang) || clang_c_program=false
fi
if [ -n "$gccgo_package" ]; then
	gcc_gccgo_program="$packages_dir/$gccgo_package/bin/gccgo"
	gcc_gccgo_options_suffix+=(-Wl,-rpath,"$gccgo_dir/lib64")
	gcc_gccgo_options_suffix+=(-Wl,-rpath,"$gccgo_dir/lib")
	ld_path_prefix+=("$gccgo_dir/lib")
	ld_path_prefix+=("$gccgo_dir/lib64")
	gcc_gccgo_transform=1
	gcc_go_program="$packages_dir/$gccgo_package/bin/go"
	gcc_go_transform=1
else
	gcc_gccgo_program=$(find_compiler gccgo) || gcc_gccgo_program=false
	gcc_go_program=$(find_compiler go) || gcc_go_program=false
fi
if [ -n "$cmake_package" ]; then
	cmake_program="$packages_dir/$cmake_package/bin/cmake"
else
	cmake_program=$(type -p cmake) || cmake_program=false
fi
if [ -n "$gdb_package" ]; then
	gdb_program="$packages_dir/$gdb_package/bin/gdb"
else
	gdb_program=$(type -p gdb) || gdb_program=false
fi

# If fmtlib is installed, automatically link with it so that std::format
# functionality is available without any special effort being required.
if [ -n "$fmtlib_package" ]; then
	gcc_cxx_options_suffix+=(-lstdfmt)
	clang_cxx_options_suffix+=(-lstdfmt)
fi

if [ "$verbose" -ge 1 ]; then
	eecho "packages:"
	for package in "${packages[@]}"; do
		eecho "    $package"
	done
	eecho "include directories:"
	for dir in "${inc_path[@]}"; do
		eecho "    $dir"
	done
	eecho "library directories:"
	for dir in "${lib_path[@]}"; do
		eecho "    $dir"
	done
	eecho "cmake directories:"
	for dir in "${cmake_path_prefix[@]}"; do
		eecho "    $dir"
	done
	for dir in "${cmake_path_suffix[@]}"; do
		eecho "    $dir"
	done
fi

################################################################################
################################################################################

if [ "$verbose" -ge 1 ]; then
	eecho "name $name"
	eecho "shell $shell"
	eecho "level $sde_level"
fi

case "$shell" in
bash)
	bash_setup;;
*)
	panic "Unsupported shell $shell";;
esac

exit
