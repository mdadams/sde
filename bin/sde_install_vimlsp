#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2017, 2018 Michael D. Adams
# All rights reserved.
# 
# This file is part of the SDE software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

panic()
{
	echo "ERROR: $@"
	exit 1
}

perform_cleanup()
{
	if [ -n "$tmp_dir" -a -d "$tmp_dir" ]; then
		rm -rf "$tmp_dir" || \
		  echo "warning: cannot remove temporary directory $tmp_dir"
	fi
}

usage()
{
	default_vimlsp_version=b8e75ef927b48848f3f21b7033aa68c9c88e9392
	default_vimlsp_async_version=0fb846e1eb3c2bf04d52a57f41088afb3395212e
	default_vimlsp_ac_version=8e018dee9c5e2205288bda01be0de196b04b7cf2
	default_vimlsp_aclsp_version=684c34453db9dcbed5dbf4769aaa6521530a23e0

	echo "BAD USAGE: $@"
	cat <<- EOF
	usage:
	$0 -d \$install_dir [options]

	options:
	-d \$install_dir
	    Set the installation directory to \$install_dir.
	-v \$component:\$version
	    Set the version (i.e., branch/commit) to install.
	    e.g., vim-lsp:XXX

	Examples
	========

	$0 -v vim-lsp:$default_vimlsp_version \
	  -v async.vim:$default_vimlsp_async_version \
	  -v asyncomplete.vim:$default_vimlsp_ac_version \
	  -v asyncomplete-lsp.vim:$default_vimlsp_aclsp_version \
	  -d /tmp/vimlsp

	EOF
	exit 2
}

git_download()
{
	local url="$1"
	local version="$2"
	local out_dir="$(pwd)/$(basename "$url" .git)" || return 1
	git clone "$url" "$out_dir" || return 1
	(cd "$out_dir" && git checkout "$version") || return 1
}

user=$(whoami) || \
  panic "cannot get user name"
host=$(hostname) || \
  panic "cannot get host name"
cur_dir=$(pwd) || \
  panic "cannot get current directory"

vimlsp_version="master"
async_version="master"
ac_version="master"
aclsp_version="master"

install_dir=
tmp_dir="/tmp/sde_install_vimlsp-$user@$host-$$"
verbose=0
cleanup=1

while getopts Cd:v:V opt; do
	case "$opt" in
	C)
		cleanup=0;;
	d)
		install_dir="$OPTARG";;
	v)
		buffer=("$OPTARG")
		component=$(echo "$buffer" | tr ':' ' ' | awk '{print $1;}' -)
		version=$(echo "$buffer" | tr ':' ' ' | awk '{print $2;}' -)
		echo "$component $version"
		case "$component" in
		vim-lsp)
			vimlsp_version="$version";;
		async.vim)
			async_version="$version";;
		asyncomplete.vim)
			ac_version="$version";;
		asyncomplete-lsp.vim)
			aclsp_version="$version";;
		*)
			usage;;
		esac
		;;
	V)
		verbose=$((verbose + 1));;
	\?)
		usage
		break;;
	esac
done
shift $((OPTIND - 1))

if [ -z "$install_dir" ]; then
	usage "no installation directory specified"
fi

if [ -z "$vimlsp_version" ]; then
	usage "no vim-lsp version specified"
fi
if [ -z "$async_version" ]; then
	usage "no async.vim version specified"
fi
if [ -z "$ac_version" ]; then
	usage "no asyncomplete.vim version specified"
fi
if [ -z "$aclsp_version" ]; then
	usage "no asyncomplete-lsp.vim version specified"
fi

tmp_dir_template="${SDE_TMPDIR:-/tmp}/sde_install_vimlsp-$user-XXXXXXXX"

tmp_dir=$(mktemp -d "$tmp_dir_template") || \
  panic "cannot create temporary directory"
if [ "$cleanup" -ne 0 ]; then
	trap perform_cleanup EXIT
fi

# Set the user file-creation mask to allow read and execute permissions
# for the group and others.
# This will help to increase the likelihood that the installed software
# will be accessible by all users.
umask 022

src_dir="$install_dir/src"
misc_dir="$install_dir/misc"

for dir in "$src_dir" "$misc_dir"; do
	if [ ! -d "$dir" ]; then
		mkdir -p "$dir" || \
		  panic "cannot make directory $dir"
	fi
done

vimlsp_url="https://github.com/prabirshrestha/vim-lsp.git"
async_url="https://github.com/prabirshrestha/async.vim.git"
ac_url="https://github.com/prabirshrestha/asyncomplete.vim.git"
aclsp_url="https://github.com/prabirshrestha/asyncomplete-lsp.vim.git"

(cd "$src_dir" && git_download "$vimlsp_url" "$vimlsp_version") || \
  panic "git download failed vimlsp $vimlsp_url $vimlsp_version"
(cd "$src_dir" && git_download "$async_url" "$async_version") || \
  panic "git download failed async $async_url $async_version"
(cd "$src_dir" && git_download "$ac_url" "$ac_version") || \
  panic "git download failed ac $ac_url $ac_version"
(cd "$src_dir" && git_download "$aclsp_url" "$aclsp_version") || \
  panic "git download failed aclsp $aclsp_url $aclsp_version"

#cat > "$misc_dir/vim-lsp.vim" <<- EOF
#if exists(':LspDefinition')
#	:so ~/.vimrc_lsp
#endif
#EOF
#[ $? -eq 0 ] || panic

cat > "$misc_dir/vim-lsp.vim" <<- EOF
if executable('clangd')
    augroup lsp_clangd
        autocmd!
        autocmd User lsp_setup call lsp#register_server({
            \ 'name': 'clangd',
            \ 'cmd': {server_info->['clangd']},
            \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
            \ })
        autocmd FileType c setlocal omnifunc=lsp#complete
        autocmd FileType cpp setlocal omnifunc=lsp#complete
        autocmd FileType objc setlocal omnifunc=lsp#complete
        autocmd FileType objcpp setlocal omnifunc=lsp#complete
    augroup end
endif
EOF
[ $? -eq 0 ] || \
  panic "cannot create vim-lsp.vim"

exit 0
